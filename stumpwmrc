;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

;; change the prefix key to something else
(set-prefix-key (kbd "s-SPC"))


(defmacro multiple-define-in-map (map &body defs)
  (append 
   '(progn)
   (loop for d in defs collect
        `(define-key ,map ,(car d) ,(cadr d)))))

(multiple-define-in-map *top-map* 
  ((kbd "s-0") "select-window-by-number 0")
  ((kbd "s-1") "select-window-by-number 1")
  ((kbd "s-2") "select-window-by-number 2")
  ((kbd "s-3") "select-window-by-number 3")
  ((kbd "s-4") "select-window-by-number 4")
  ((kbd "s-5") "select-window-by-number 5")
  ((kbd "s-6") "select-window-by-number 6")
  ((kbd "s-7") "select-window-by-number 7")
  ((kbd "s-8") "select-window-by-number 8")
  ((kbd "s-9") "select-window-by-number 9")
  ((kbd "s-l") "move-focus right")
  ((kbd "s-h") "move-focus left")
  ((kbd "s-j") "move-focus down")
  ((kbd "s-k") "move-focus up")
  ((kbd "s-L") "move-window right")
  ((kbd "s-H") "move-window left")
  ((kbd "s-J") "move-window down")
  ((kbd "s-K") "move-window up")
  ((kbd "s-Right") "move-focus right")
  ((kbd "s-Left") "move-focus left")
  ((kbd "s-Down") "move-focus down")
  ((kbd "s-Up") "move-focus up")
  ((kbd "S-s-Right") "move-window right")
  ((kbd "S-s-Left") "move-window left")
  ((kbd "S-s-Down") "move-window down")
  ((kbd "S-s-Up") "move-window up")
  ((kbd "s-e") "emacs")
  ((kbd "s-i") "conkeror")
  ((kbd "s-Tab") "windowlist"))


(multiple-define-in-map *root-map*
  ((kbd "b") "select")
  ((kbd "m") "mode-line")
  ((kbd "Tab") "windowlist"))

(defcommand conkeror () ()
  "run conkeror"
  (run-or-raise "exec conkeror" '(:class "Conkeror")))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(setf *window-border-style* 'thin)
(setf *mouse-focus-policy* :click)

;; Read some doc
(define-key *root-map* (kbd "d") "exec gv")
;; Browse somewhere
;; (define-key *root-map* (kbd "b") "colon1 exec firefox http://www.")
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")
;; Lock screen
(define-key *root-map* (kbd "C-l") "exec xlock")

;; Web jump (works for Google and Imdb)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,name (search) ((:rest ,(concatenate 'string name " search: ")))
;;     (substitute #\+ #\Space search)
;;     (run-shell-command (concatenate 'string ,prefix search))))

;; (make-web-jump "google" "firefox http://www.google.fr/search?q=")
;; (make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; ;; C-t M-s is a terrble binding, but you get the idea.
;; (define-key *root-map* (kbd "M-s") "google")
;; (define-key *root-map* (kbd "i") "imdb")

;; Message window font

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

(define-frame-preference "Ardour"
  (0 t   t   :instance "ardour_editor" :type :normal)
  (0 t   t   :title "Ardour - Session Control")
  (0 nil nil :class "XTerm")
  (1 t   nil :type :normal)
  (1 t   t   :instance "ardour_mixer")
  (2 t   t   :instance "jvmetro")
  (1 t   t   :instance "qjackctl")
  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

(define-frame-preference "Shareland"
  (0 t   nil :class "XTerm")
  (1 nil t   :class "aMule"))

(defun focus-java-window (curr last)
  (pushnew :WM_TAKE_FOCUS (xlib:wm-protocols (window-xwin curr)))
  (xlib:set-input-focus *display* (window-xwin curr) :none))

(add-hook *focus-window-hook* 'focus-java-window)
(remove-hook *focus-window-hook* 'focus-java-window)

;;; stuff that can break goes at the end, so that the main config
;;; doesn't die
(ql:quickload "swank")
(swank:create-server :port 1389)
(run-shell-command "/usr/bin/stalonetray &")
(run-shell-command "gnome-power-manager &")
(run-shell-command "nm-applet &")
(run-shell-command "dropbox start &")
